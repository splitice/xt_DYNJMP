diff --git a/net/ipv4/netfilter/ip_tables.c b/net/ipv4/netfilter/ip_tables.c
index 10b91ebdf213..f4d069d9d5d9 100644
--- a/net/ipv4/netfilter/ip_tables.c
+++ b/net/ipv4/netfilter/ip_tables.c
@@ -220,6 +220,41 @@ struct ipt_entry *ipt_next_entry(const struct ipt_entry *entry)
 	return (void *)entry + entry->next_offset;
 }
 
+static inline
+struct ipt_entry *ipt_n_entry(struct ipt_entry *start, uint32_t *offset_cache, uint16_t cache_size, u_int8_t count)
+{
+	struct ipt_entry *entry = start;
+	uint16_t i; uint32_t t;
+	if(unlikely(cache_size == 0 || offset_cache[0] == 0)){
+		if(cache_size == 0){
+			do {
+				if(entry->next_offset == 0) {
+                                        return entry;
+                                }
+				entry = (void *)entry + entry->next_offset;
+			} while(count--);
+			return (void*)entry;
+		} else {
+                        i = 0;
+			do {
+				if(entry->next_offset == 0) {
+					break;
+				}
+				entry = (void *)entry + entry->next_offset;
+				offset_cache[i++] = (uint32_t)(((void*)entry) - ((void*)start));
+			} while(i != cache_size);
+		}
+	}
+	if(unlikely(count >= cache_size)){
+		return NULL;
+	}
+	t = offset_cache[count];
+	if(unlikely(!t)) {
+		return NULL;
+	}
+	return ((void*)start) + t;
+}
+
 /* Returns one of the generic firewall policies, like NF_ACCEPT. */
 unsigned int
 ipt_do_table(struct sk_buff *skb,
@@ -233,7 +268,7 @@ ipt_do_table(struct sk_buff *skb,
 	unsigned int verdict = NF_DROP;
 	const char *indev, *outdev;
 	const void *table_base;
-	struct ipt_entry *e, **jumpstack;
+	struct ipt_entry *e, *tmpe, **jumpstack;
 	unsigned int stackidx, cpu;
 	const struct xt_table_info *private;
 	struct xt_action_param acpar;
@@ -276,7 +311,7 @@ ipt_do_table(struct sk_buff *skb,
 	e = get_entry(table_base, private->hook_entry[hook]);
 
 	do {
-		const struct xt_entry_target *t;
+		struct xt_entry_target *t;
 		const struct xt_entry_match *ematch;
 		struct xt_counters *counter;
 
@@ -298,7 +333,7 @@ ipt_do_table(struct sk_buff *skb,
 		counter = xt_get_this_cpu_counter(&e->counters);
 		ADD_COUNTER(*counter, skb->len, 1);
 
-		t = ipt_get_target_c(e);
+		t = ipt_get_target(e);
 		WARN_ON(!t->u.kernel.target);
 
 #if IS_ENABLED(CONFIG_NETFILTER_XT_TARGET_TRACE)
@@ -348,6 +383,15 @@ ipt_do_table(struct sk_buff *skb,
 			/* Target might have changed stuff. */
 			ip = ip_hdr(skb);
 			e = ipt_next_entry(e);
+		} else if(verdict & 0xFF) {
+			verdict = verdict >> 8;
+			tmpe = ipt_n_entry(e, (uint32_t*)t->data, t->u.kernel.target->targetsize/sizeof(uint32_t), verdict);
+			if(unlikely(tmpe == e || tmpe == NULL)) {
+				verdict = NF_ACCEPT;
+				break;
+			}
+			e = tmpe;
+			verdict = XT_CONTINUE;
 		} else {
 			/* Verdict */
 			break;
